import { Injectable } from '@nestjs/common';
import { Vehicle, DuctItem, PackResult } from '../types';
import { MultiScenarioOptimizer, Pack3D, ItemRegistry } from '@ventprom/core';

@Injectable()
export class PackService {
  private optimizer = new MultiScenarioOptimizer();
  private pack3d = new Pack3D();
  private itemRegistry = new ItemRegistry();
  
  async pack(vehicle: Vehicle, items: DuctItem[]): Promise<PackResult> {
    console.log(`PackService: –ú–Ω–æ–≥–æ—Å—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è ${items.length} –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤ –≤ ${vehicle.name}`);
    
    try {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ä–µ–µ—Å—Ç—Ä–µ
      this.itemRegistry.registerItems(items);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–ø–∞–∫–æ–≤–∫–∏
      const packingResult = this.pack3d.pack(vehicle, items);
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
      this.itemRegistry.registerPlacements(packingResult.placements);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —É–ø–∞–∫–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const scenarios = await this.optimizer.analyzeScenarios(vehicle, items);
      
      // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
      const hasFragileItems = items.some(item => (item as any).material === 'galvanized');
      const best = this.optimizer.selectBestScenario(scenarios, {
        prioritizeSafety: true, // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        hasFragileItems
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
      console.log(`–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: ${best.config.name}`);
      console.log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${best.warnings.length}`);
      console.log(`–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${best.recommendations.length}`);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –º–∞—Ç—Ä–µ—à–∫–∏
      const optimizedItems = this.optimizeWithNesting(items);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      const totalWeight = this.itemRegistry.getStats().weightStats.total;
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const stats = this.itemRegistry.getStats();
      
      // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      let message = `üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:
üìä –í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: "${best.config.name}"
üì¶ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
  ‚Ä¢ –í–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤: ${stats.totalItems} —Ç–∏–ø–æ–≤, ${packingResult.placements.length} –ø–æ–∑–∏—Ü–∏–π
  ‚Ä¢ –ú–∞—à–∏–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${packingResult.binsUsed}
  ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: ${(packingResult.metrics.volumeFill * 100).toFixed(1)}%
  ‚Ä¢ –í–µ—Å: ${totalWeight.toFixed(1)} –∫–≥
  ‚Ä¢ –¶–µ–Ω—Ç—Ä —Ç—è–∂–µ—Å—Ç–∏: ${best.metrics.centerOfGravityHeight.toFixed(1)}% –≤—ã—Å–æ—Ç—ã
  ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${best.metrics.stabilityScore.toFixed(1)}/100
  ‚Ä¢ –ó–∞—â–∏—Ç–∞ —Ö—Ä—É–ø–∫–∏—Ö: ${best.metrics.fragileProtectionScore.toFixed(1)}/100
  ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: ${best.metrics.unloadingEfficiency.toFixed(1)}/100

üìã –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${Object.entries(stats.materialStats).map(([mat, count]) => `${mat}: ${count}`).join(', ')}
üîß –§–ª–∞–Ω—Ü—ã: ${Object.entries(stats.flangeStats).map(([flange, count]) => `${flange}: ${count}`).join(', ')}`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      const safety = best.metrics.transportSafety;
      message += `\nüõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:
  ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è: ${safety.brakeStability ? '‚úÖ' : '‚ùå'}
  ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–≤–æ—Ä–æ—Ç–æ–≤: ${safety.turnStability ? '‚úÖ' : '‚ùå'}
  ‚Ä¢ –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –≤–∏–±—Ä–∞—Ü–∏–∏: ${safety.vibrationResistance ? '‚úÖ' : '‚ùå'}
  ‚Ä¢ –†–∏—Å–∫ –æ–ø—Ä–æ–∫–∏–¥—ã–≤–∞–Ω–∏—è: ${this.getRiskEmoji(safety.tippingRisk)} ${safety.tippingRisk}`;

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
      if (best.warnings.length > 0) {
        message += `\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n${best.warnings.map(w => `  ${w}`).join('\n')}`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (best.recommendations.length > 0) {
        message += `\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n${best.recommendations.map(r => `  ${r}`).join('\n')}`;
      }

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—Ä—É–≥–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
      if (scenarios.length > 1) {
        message += `\n\nüìã –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:`;
        scenarios.slice(1, 3).forEach((scenario, index) => {
          message += `\n${index + 2}. "${scenario.config.name}" - –º–∞—à–∏–Ω: ${scenario.metrics.vehiclesUsed}, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ${scenario.metrics.stabilityScore.toFixed(1)}`;
        });
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const result: PackResult = {
        success: true,
        items: optimizedItems,
        vehicle,
        totalWeight: totalWeight,
        utilization: packingResult.metrics.volumeFill * 100,
        message
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–ª—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
      (result as any).placements = packingResult.placements;
      (result as any).rows = packingResult.rows;

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ü–µ–Ω–∞—Ä–∏–∏
      (result as any).scenario = {
        name: best.config.name,
        description: best.config.description,
        metrics: best.metrics,
        warnings: best.warnings,
        recommendations: best.recommendations,
        allScenarios: scenarios.map(s => ({
          name: s.config.name,
          vehiclesUsed: s.metrics.vehiclesUsed,
          stabilityScore: s.metrics.stabilityScore,
          utilization: s.metrics.avgUtilization
        }))
      };
      
      return result;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ—Å—Ü–µ–Ω–∞—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
      // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é —É–ø–∞–∫–æ–≤–∫—É
      return this.fallbackPack(vehicle, items);
    }
  }

  private getRiskEmoji(risk: 'low' | 'medium' | 'high'): string {
    switch (risk) {
      case 'low': return 'üü¢';
      case 'medium': return 'üü°';
      case 'high': return 'üî¥';
      default: return '‚ö™';
    }
  }

  // Fallback –º–µ—Ç–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  private async fallbackPack(vehicle: Vehicle, items: DuctItem[]): Promise<PackResult> {
    const optimizedItems = this.optimizeWithNesting(items);
    const totalWeight = optimizedItems.reduce((sum, item) => sum + (item.weightKg * item.qty), 0);
    const utilization = vehicle.maxPayloadKg ? (totalWeight / vehicle.maxPayloadKg) * 100 : 0;
    
    return {
      success: true,
      items: optimizedItems,
      vehicle,
      totalWeight,
      utilization,
      message: '–£–ø–∞–∫–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–º–Ω–æ–≥–æ—Å—Ü–µ–Ω–∞—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)'
    };
  }

  // –ê–ª–≥–æ—Ä–∏—Ç–º –º–∞—Ç—Ä–µ—à–∫–∏ –¥–ª—è –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤
  private optimizeWithNesting(items: DuctItem[]): DuctItem[] {
    const nested: DuctItem[] = [];
    const remaining: DuctItem[] = [...items];
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–±–æ–ª—å—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    remaining.sort((a, b) => {
      const volumeA = this.calculateVolume(a);
      const volumeB = this.calculateVolume(b);
      return volumeB - volumeA;
    });
    
    for (let i = 0; i < remaining.length; i++) {
      const outer = remaining[i];
      const innerItems: DuctItem[] = [];
      
      for (let j = i + 1; j < remaining.length; j++) {
        const inner = remaining[j];
        if (this.checkNesting(outer, inner)) {
          innerItems.push(inner);
          remaining.splice(j, 1);
          j--;
        }
      }
      
      if (innerItems.length > 0) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        nested.push({
          ...outer,
          id: `nested_${outer.id}`,
          weightKg: (outer.weightKg || 0) + innerItems.reduce((sum, item) => sum + (item.weightKg || 0), 0),
          qty: 1 // –û–¥–∏–Ω –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        });
        
        console.log(`–ú–∞—Ç—Ä–µ—à–∫–∞: ${outer.id} —Å–æ–¥–µ—Ä–∂–∏—Ç ${innerItems.length} –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤`);
      } else {
        nested.push(outer);
      }
    }
    
    return nested;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–ª–æ–∂–µ–Ω–∏—è (–º–∞—Ç—Ä–µ—à–∫–∞)
  private checkNesting(outer: DuctItem, inner: DuctItem): boolean {
    const clearance = 10; // 10mm –∑–∞–∑–æ—Ä
    
    // –ö—Ä—É–≥–ª—ã–π –≤ –∫—Ä—É–≥–ª—ã–π
    if (outer.type === 'rect' && outer.w && outer.h && inner.type === 'rect' && inner.w && inner.h) {
      return inner.w + clearance < outer.w && 
             inner.h + clearance < outer.h && 
             inner.length <= outer.length;
    }
    
    // –ö—Ä—É–≥–ª—ã–π –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π
    if (outer.type === 'rect' && outer.w && outer.h && inner.type === 'round' && inner.d) {
      const minDimension = Math.min(outer.w, outer.h);
      return inner.d + clearance < minDimension && inner.length <= outer.length;
    }
    
    return false;
  }

  // –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞
  private calculateVolume(item: DuctItem): number {
    if (item.type === 'rect' && item.w && item.h) {
      return item.w * item.h * item.length;
    }
    return 100 * 100 * 1000; // Fallback volume
  }

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É–∫–ª–∞–¥–∫–∏
  private analyzeSafetyRules(items: DuctItem[], vehicle: Vehicle): {
    status: string;
    warnings: string[];
    recommendations: string[];
  } {
    const warnings: string[] = [];
    const recommendations: string[] = [];
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤
    const roundItems = items.filter(item => item.type === 'round');
    const rectItems = items.filter(item => item.type === 'rect');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä—É–≥–ª—ã—Ö –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤
    if (roundItems.length > 0) {
      const heavyRounds = roundItems.filter(item => (item.weightKg || 0) > 20);
      if (heavyRounds.length > 0) {
        warnings.push('–¢—è–∂–µ–ª—ã–µ –∫—Ä—É–≥–ª—ã–µ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏');
        recommendations.push('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å–ø–æ—Ä–∫–∏ –º–µ–∂–¥—É –∫—Ä—É–≥–ª—ã–º–∏ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞–º–∏');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Å–∞
    const totalWeight = items.reduce((sum, item) => sum + (item.weightKg * item.qty), 0);
    const avgWeight = totalWeight / items.length;
    
    if (avgWeight > 30) {
      warnings.push('–í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      recommendations.push('–†–∞–∑–º–µ—â–∞—Ç—å —Ç—è–∂–µ–ª—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –∫—É–∑–æ–≤—É');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const galvanizedItems = items.filter(item => 
      (item as any).material === 'galvanized' || !((item as any).material));
    
    if (galvanizedItems.length > items.length * 0.8) {
      recommendations.push('–û—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–ª—å - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å —Ü–∞—Ä–∞–ø–∏–Ω–∞–º–∏');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã —Å—Ç–æ–ø–∫–∏
    const tallItems = items.filter(item => {
      const height = item.h || item.d || 100;
      return height > 300; // –ë–æ–ª–µ–µ 30—Å–º
    });
    
    if (tallItems.length > 3) {
      warnings.push('–ú–Ω–æ–≥–æ –≤—ã—Å–æ–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤—ã—Å–æ—Ç—É —Å—Ç–æ–ø–∫–∏');
      recommendations.push('–ú–∞–∫—Å–∏–º—É–º 2–º –≤ –≤—ã—Å–æ—Ç—É –¥–ª—è –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞–ª–∏');
    }
    
    // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    let status = '‚úÖ –°–æ–±–ª—é–¥–µ–Ω—ã';
    if (warnings.length > 0) {
      status = '‚ö†Ô∏è –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏';
    }
    
    return {
      status,
      warnings,
      recommendations
    };
  }
}







