import { Injectable } from '@nestjs/common';
import { Vehicle, DuctItem, PackResult } from '../types';

@Injectable()
export class PackService {
  async pack(vehicle: Vehicle, items: DuctItem[]): Promise<PackResult> {
    console.log(`PackService: –£–ø–∞–∫–æ–≤–∫–∞ ${items.length} –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤ –≤ ${vehicle.name}`);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –º–∞—Ç—Ä–µ—à–∫–∏
    const optimizedItems = this.optimizeWithNesting(items);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    const totalWeight = optimizedItems.reduce((sum, item) => sum + (item.weightKg * item.qty), 0);
    const utilization = vehicle.maxPayloadKg ? (totalWeight / vehicle.maxPayloadKg) * 100 : 0;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const vehicleVolume = vehicle.width * vehicle.height * vehicle.length;
    const itemsVolume = optimizedItems.reduce((sum, item) => sum + this.calculateVolume(item) * item.qty, 0);
    const volumeUtilization = (itemsVolume / vehicleVolume) * 100;
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const originalCount = items.reduce((sum, item) => sum + item.qty, 0);
    const optimizedCount = optimizedItems.reduce((sum, item) => sum + item.qty, 0);
    const spaceSaved = originalCount - optimizedCount;
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–∏–ª —É–∫–ª–∞–¥–∫–∏
    const safetyAnalysis = this.analyzeSafetyRules(optimizedItems, vehicle);
    
    let message = `–£–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:
‚Ä¢ ${originalCount} –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤ ‚Üí ${optimizedCount} –ø–æ–∑–∏—Ü–∏–π
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞: ${spaceSaved} –ø–æ–∑–∏—Ü–∏–π –±–ª–∞–≥–æ–¥–∞—Ä—è –º–∞—Ç—Ä–µ—à–∫–µ
‚Ä¢ –í–µ—Å: ${totalWeight.toFixed(1)} –∫–≥ (${utilization.toFixed(1)}% –æ—Ç –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç–∏)
‚Ä¢ –û–±—ä–µ–º: ${volumeUtilization.toFixed(1)}% –æ—Ç –∫—É–∑–æ–≤–∞
‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${safetyAnalysis.status}`;

    if (spaceSaved > 0) {
      message += `\nüéØ –ú–∞—Ç—Ä–µ—à–∫–∞: ${spaceSaved} –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤ –≤–ª–æ–∂–µ–Ω–æ –≤ –¥—Ä—É–≥–∏–µ!`;
    }
    
    if (safetyAnalysis.warnings.length > 0) {
      message += `\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${safetyAnalysis.warnings.join(', ')}`;
    }
    
    if (safetyAnalysis.recommendations.length > 0) {
      message += `\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${safetyAnalysis.recommendations.join(', ')}`;
    }
    
    return {
      success: true,
      items: optimizedItems,
      vehicle,
      totalWeight,
      utilization: Math.max(utilization, volumeUtilization), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é
      message
    };
  }

  // –ê–ª–≥–æ—Ä–∏—Ç–º –º–∞—Ç—Ä–µ—à–∫–∏ –¥–ª—è –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤
  private optimizeWithNesting(items: DuctItem[]): DuctItem[] {
    const nested: DuctItem[] = [];
    const remaining: DuctItem[] = [...items];
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–±–æ–ª—å—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
    remaining.sort((a, b) => {
      const volumeA = this.calculateVolume(a);
      const volumeB = this.calculateVolume(b);
      return volumeB - volumeA;
    });
    
    for (let i = 0; i < remaining.length; i++) {
      const outer = remaining[i];
      const innerItems: DuctItem[] = [];
      
      for (let j = i + 1; j < remaining.length; j++) {
        const inner = remaining[j];
        if (this.checkNesting(outer, inner)) {
          innerItems.push(inner);
          remaining.splice(j, 1);
          j--;
        }
      }
      
      if (innerItems.length > 0) {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        nested.push({
          ...outer,
          id: `nested_${outer.id}`,
          weightKg: (outer.weightKg || 0) + innerItems.reduce((sum, item) => sum + (item.weightKg || 0), 0),
          qty: 1 // –û–¥–∏–Ω –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        });
        
        console.log(`–ú–∞—Ç—Ä–µ—à–∫–∞: ${outer.id} —Å–æ–¥–µ—Ä–∂–∏—Ç ${innerItems.length} –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤`);
      } else {
        nested.push(outer);
      }
    }
    
    return nested;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–ª–æ–∂–µ–Ω–∏—è (–º–∞—Ç—Ä–µ—à–∫–∞)
  private checkNesting(outer: DuctItem, inner: DuctItem): boolean {
    const clearance = 10; // 10mm –∑–∞–∑–æ—Ä
    
    // –ö—Ä—É–≥–ª—ã–π –≤ –∫—Ä—É–≥–ª—ã–π
    if (outer.type === 'rect' && outer.w && outer.h && inner.type === 'rect' && inner.w && inner.h) {
      return inner.w + clearance < outer.w && 
             inner.h + clearance < outer.h && 
             inner.length <= outer.length;
    }
    
    // –ö—Ä—É–≥–ª—ã–π –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π
    if (outer.type === 'rect' && outer.w && outer.h && inner.type === 'round' && inner.d) {
      const minDimension = Math.min(outer.w, outer.h);
      return inner.d + clearance < minDimension && inner.length <= outer.length;
    }
    
    return false;
  }

  // –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞
  private calculateVolume(item: DuctItem): number {
    if (item.type === 'rect' && item.w && item.h) {
      return item.w * item.h * item.length;
    }
    return 100 * 100 * 1000; // Fallback volume
  }

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É–∫–ª–∞–¥–∫–∏
  private analyzeSafetyRules(items: DuctItem[], vehicle: Vehicle): {
    status: string;
    warnings: string[];
    recommendations: string[];
  } {
    const warnings: string[] = [];
    const recommendations: string[] = [];
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤
    const roundItems = items.filter(item => item.type === 'round');
    const rectItems = items.filter(item => item.type === 'rect');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä—É–≥–ª—ã—Ö –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–æ–≤
    if (roundItems.length > 0) {
      const heavyRounds = roundItems.filter(item => (item.weightKg || 0) > 20);
      if (heavyRounds.length > 0) {
        warnings.push('–¢—è–∂–µ–ª—ã–µ –∫—Ä—É–≥–ª—ã–µ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏');
        recommendations.push('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å–ø–æ—Ä–∫–∏ –º–µ–∂–¥—É –∫—Ä—É–≥–ª—ã–º–∏ –≤–æ–∑–¥—É—Ö–æ–≤–æ–¥–∞–º–∏');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Å–∞
    const totalWeight = items.reduce((sum, item) => sum + (item.weightKg * item.qty), 0);
    const avgWeight = totalWeight / items.length;
    
    if (avgWeight > 30) {
      warnings.push('–í—ã—Å–æ–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      recommendations.push('–†–∞–∑–º–µ—â–∞—Ç—å —Ç—è–∂–µ–ª—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –∫—É–∑–æ–≤—É');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const galvanizedItems = items.filter(item => 
      (item as any).material === 'galvanized' || !((item as any).material));
    
    if (galvanizedItems.length > items.length * 0.8) {
      recommendations.push('–û—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–ª—å - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å —Ü–∞—Ä–∞–ø–∏–Ω–∞–º–∏');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã —Å—Ç–æ–ø–∫–∏
    const tallItems = items.filter(item => {
      const height = item.h || item.d || 100;
      return height > 300; // –ë–æ–ª–µ–µ 30—Å–º
    });
    
    if (tallItems.length > 3) {
      warnings.push('–ú–Ω–æ–≥–æ –≤—ã—Å–æ–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤—ã—Å–æ—Ç—É —Å—Ç–æ–ø–∫–∏');
      recommendations.push('–ú–∞–∫—Å–∏–º—É–º 2–º –≤ –≤—ã—Å–æ—Ç—É –¥–ª—è –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞–ª–∏');
    }
    
    // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    let status = '‚úÖ –°–æ–±–ª—é–¥–µ–Ω—ã';
    if (warnings.length > 0) {
      status = '‚ö†Ô∏è –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏';
    }
    
    return {
      status,
      warnings,
      recommendations
    };
  }
}







